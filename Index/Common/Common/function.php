<?php

require_once './oss-php/sdk.class.php';
require_once './PHPExcel/Classes/PHPExcel.php';
require_once './PHPExcel/Classes/PHPExcel/Writer/Excel2007.php'; // 用于 excel-2007 格式
 


function getthemonth($date) {
	$firstday = date('Y-m-01', strtotime($date));
	$lastday = date('Y-m-d', strtotime("$firstday +1 month -1 day"));
	return array($firstday, $lastday);
}
/**
 * 初始化计算器
 */
function resetCounter(){
		$Model = new \Think\Model("","",getMyCon());
		$sqlstr = "set @x=0;";
		$Model->execute($sqlstr);
}

function getMyCon($DSNo=1)
{
			  		return array(	'DB_TYPE' => 'mysql',
			  		'DB_PORT' =>3306,
					'DB_CHARSET'=> 'utf8', // 字符集
					'DB_Host' => '127.0.0.1', //mac下不能使用localhost!
					'DB_User' => 'root',
					'DB_PWD'  => 'Rickywang9',
					'DB_NAME' => 'tocpreprod',
					'DB_DEBUG'  =>  TRUE);
}

function getInputValue($attName,$default=null)
{
	$attValue = $default;
	
	switch ($_SERVER['REQUEST_METHOD']) {
		case "POST":
				if(isset($_POST[$attName]))
				{
					$attValue = $_POST[$attName];
				}
			break;
			
		case "GET":
				if(isset($_GET[$attName]))
				{
					$attValue = $_GET[$attName];
				}
			break;
			
		default:
			break;
	}	
	return $attValue;
}

function getInputValueArray($attName,$default=null)
{
	$attValue = $default;
	
	switch ($_SERVER['REQUEST_METHOD']) {
		case "POST":
				if(isset($_POST[$attName]))
				{
					$attValue = $_POST[$attName];
				}
			break;
			
		case "GET":
				if(isset($_GET[$attName]))
				{
					$attValue = $_GET[$attName];
				}
			break;
			
		default:
			break;
	}	
	return str_replace(",","','",$attValue);
}

function hasInput($attName)
{
	$hasInput = false;
	
	switch ($_SERVER['REQUEST_METHOD']) {
		case "POST":
				if(isset($_POST[$attName]))
				{
					$hasInput = true;
				}
			break;
			
		case "GET":
				if(isset($_GET[$attName]))
				{
					 $hasInput = true;
				}
			break;
			
		default:
			break;
	}	
	return $hasInput;
}

function upload2OSS($bucket,$key,$filepath)
{	
	$oss = new ALIOSS();
	$oss->set_debug_mode(TRUE);
	
	try
	{		
		$response = $oss->upload_file_by_file($bucket,$key,$filepath);		
		$timeout = 3600*24*365*10;
		$response = $oss->get_sign_url($bucket,$key,$timeout);
		return $response;

	}catch (Exception $ex){
	die($ex->getMessage());
	}
	
	return null;
}

function getOSSFilePath($bucket,$key)
{	
	$oss = new ALIOSS();
	$oss->set_debug_mode(TRUE);
	try
	{		
		$timeout = 3600*24;
		$response = $oss->get_sign_url($bucket,$key,$timeout);
		return $response;

	}catch (Exception $ex){
	die($ex->getMessage());
	}
}

    function getCSV($fileName,$data,$headArr)
	{
		 if (count($data) == 0) { 
			     return null; 
		} 
		 $cvsHeader = array_keys(reset($data));

	   
			foreach($headArr as $key=>$value)
			{
				if(is_array($value))
				{
					foreach($value as $k=>$v)
					{
						for($i=0;$i<count($cvsHeader);$i++)
						{
							if($cvsHeader[$i]==$k) $cvsHeader[$i]=$v;			
						}
					}
				}
				else 
				{
					for($i=0;$i<count($cvsHeader);$i++)
					{
						if($cvsHeader[$i]==$key) $cvsHeader[$i]=$value;	
					}		
				}
			}

//		 dump($data);
//		 die();
	   //直接输出到浏览器 
	   header("Content-Type: application/force-download"); 
	   header("Content-Type: application/octet-stream"); 
	   header("Content-Type: application/download"); 
//	   header("Content-Type: charset=utf-8");
//	   header("Content-Encoding: gzip"); 
	   
	   header('Content-Disposition:inline;filename="'.$fileName.'"'); 
	   header("Content-Transfer-Encoding: binary"); 
	   header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT"); 
	   header("Cache-Control: must-revalidate, post-check=0, pre-check=0"); 
	   header("Pragma: no-cache"); 
	   
	   print(chr(0xEF).chr(0xBB).chr(0xBF));//设置utf-8 + bom ，处理汉字显示的乱码
	   
	   ob_start(); 
	   $df = fopen("php://output", 'w'); 
	   fputcsv($df, $cvsHeader); 
	   
	   foreach ($data as $row) { 
	   	 fputcsv($df, $row); 
	   } 
	   	fclose($df); 
	    echo ob_get_clean(); 
	}
/**
 * 使用库PHPExcel导出为xlsx
 */
	 function getExcel($fileName,$data,$headArr,$headLevel=1)
	 {
		// 创建一个处理对象实例 
	   $objExcel = new PHPExcel(); 
		// 创建文件格式写入对象实例, uncomment 
		$objWriter = new PHPExcel_Writer_Excel2007($objExcel); // 用于 2007 格式 
//		$objWriter->setOffice2003Compatibility(true); 
		
		//设置文档基本属性 
//	   $objProps = $objExcel->getProperties(); 
//	   $objProps->setCreator("Ricky Wang"); 
//	   $objProps->setLastModifiedBy("Ricky Wang"); 
//	   $objProps->setTitle("Office XLS TOC Document"); 
//	   $objProps->setSubject("Office XLS TOC Document, Demo"); 
//	   $objProps->setDescription("TOCst document, generated by PHPExcel."); 
//	   $objProps->setKeywords("office excel PHPExcel"); 
//	   $objProps->setCategory("TOC"); 
	   //设置当前的sheet索引，用于后续的内容操作。 
	   //一般只有在使用多个sheet的时候才需要显示调用。 
		//缺省情况下，PHPExcel会自动创建第一个sheet被设置SheetIndex=0 
	  $objExcel->setActiveSheetIndex(0); 
		
	  $objActSheet = $objExcel->getActiveSheet(); 
	
	 //设置当前活动sheet的名称 
	   $objActSheet->setTitle('Sheet1'); 
	   //设置单元格内容 

	//由PHPExcel根据传入内容自动判断单元格内容类型 
	//设置表头
	$counter = 0;
	$headArrOneLevel = array();
	foreach($headArr as $code=>$value)
	{
		if(is_array($value))
		{
			$objActSheet->mergeCellsByColumnAndRow($counter,1,$counter+count($value)-1,1);
			$objActSheet->setCellValueByColumnAndRow($counter,1,$code);
			foreach($value as $subcode=>$subvalue)
			{
				$headArrOneLevel[]=$subcode;
				$objActSheet->setCellValueByColumnAndRow($counter,2,$subvalue);
				$objActSheet->getColumnDimensionByColumn($counter)->setAutoSize(true); 
				$counter  += 1;
			}
		}
		else
		{
			$headArrOneLevel[] = $code;
			$objActSheet->mergeCellsByColumnAndRow($counter,1,$counter,$headLevel);
			
			$objActSheet->setCellValueByColumnAndRow($counter,1,$value);
			$objActSheet->getColumnDimensionByColumn($counter)->setAutoSize(true); 
			$counter  += 1;
		}
	}

	//设置值
	    for($i=0;$i<count($data);$i++)
	    { //行写入
	    		$colIndex = 0;
	        foreach($headArrOneLevel as $colcode)
	        {// 列写入
				$value = $data[$i][$colcode];
				$objActSheet->setCellValueByColumnAndRow($colIndex,$i+$headLevel+1, $value);
				$colIndex++;
			}
        }


	  //直接输出到浏览器 
	   header("Content-Type: application/force-download"); 
	   header("Content-Type: application/octet-stream"); 
	   header("Content-Type: application/download"); 
	   header('Content-Disposition:inline;filename="'.$fileName.'"'); 
	   header("Content-Transfer-Encoding: binary"); 
	   header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT"); 
	   header("Cache-Control: must-revalidate, post-check=0, pre-check=0"); 
	   header("Pragma: no-cache"); 
	   $objWriter->save('php://output'); 
	   
//	   $objWriter->save($fileName); 
	}
 
/**
 * 使用库PHPExcel,支持xls，xlsx，cvs
 */
  function importExcel2DBByPHPExcel($conn,$tableName,$inputFileName,$fieldArray,$userCode)
  {		
		$dbmodel = new \Think\Model("","",$conn);
		
		/**
		 * 读入excel数据:支持xls，xlsx，cvs
		 */
		 $callStartTime = microtime(true);
		 
		 // 减少内存占用方法1:设置缓存方式，减少对内存的占用
//		$cacheMethod = PHPExcel_CachedObjectStorageFactory::cache_to_phpTemp;
//		$cacheSettings = array ('cacheTime' => 600 );
//		PHPExcel_Settings::setCacheStorageMethod ( $cacheMethod, $cacheSettings );
		 
		 //减少内存占用方法2:设定缓存模式为经gzip压缩后存入cache（还有多种方式请百度）  
//		$cacheMethod = PHPExcel_CachedObjectStorageFactory::cache_in_memory_gzip;  
//		$cacheSettings = array();  
//		PHPExcel_Settings::setCacheStorageMethod($cacheMethod,$cacheSettings);
		 
		$inputFileType = PHPExcel_IOFactory::identify($inputFileName);
		$objReader = PHPExcel_IOFactory::createReader($inputFileType);
		$objReader->setReadDataOnly(true);
		
		$objPHPExcel = $objReader->load($inputFileName);
		$sheetCount = $objPHPExcel->getSheetCount();

		$callEndTime = microtime(true);
		$calcObj['loadDuration'] = $callEndTime-$callStartTime;
		
		$callStartTime = microtime(true);
		//找到第一个sheet的第一行
		$colArray = array();
		$objWorksheet = $objPHPExcel->getSheet(0);
		
		$highestColumn = $objWorksheet->getHighestColumn(); // e.g 'F'
		$highestColumnIndex = PHPExcel_Cell::columnIndexFromString($highestColumn); // e.g. 5
		
		$firstTitle = null;
		for($k=0;$k<count($fieldArray);$k++)
			{
				for($colIndex=0;$colIndex<$highestColumnIndex;$colIndex++)
				{
					$cellValue = $objWorksheet->getCellByColumnAndRow($colIndex,1)->getValue();
					if(trim($cellValue)==trim($fieldArray[$k]))
					{
						$colArray[] = $colIndex;
						if(count($colArray)==1) $firstTitle = $cellValue;
					}
				}
			}

	
		if(count($colArray)==0)
		{
			$calcObj['sqlDuration'] = 0;
			$calcObj['recordNum'] = 0;
			return $calcObj;
		}

		//生成插值语句头:insert into XXX(UserCode,)
		for($j=0;$j<count($colArray);$j++)
		{
			 $cellValue = $objWorksheet->getCellByColumnAndRow($colArray[$j],1)->getValue();
			 $cellValue = str_replace("'","",$cellValue);//去掉单引号，否则mysql无法执行
				if($j==0)
				{
					$sqlInsertCode = "insert into " . $tableName . "(`UserCode`,`" . trim($cellValue) . "`";
				}
				else if($j == count($colArray)-1)
				{
					$sqlInsertCode = $sqlInsertCode . ",`" . trim($cellValue) . "`) \n";
				}
				else
				{
					$sqlInsertCode = $sqlInsertCode . ",`" . trim($cellValue) . "`";
				}
		}

	
		$totalRecordNum = 0;
		//读取数据
		 //sheet 和row 从第1开始，column从0开始
		 $batchSize=1000;
		for ($sheetIndex=0; $sheetIndex<=$sheetCount-1; $sheetIndex++) {
				//find a sheet
				$objWorksheet = $objPHPExcel->getSheet($sheetIndex);
			     $rowCount = 	$objWorksheet->getHighestRow(); // e.g. 10

				//find a row
				for($rowIndex=2;$rowIndex<=$rowCount; $rowIndex++)
				 { 
				 	if($rowIndex==2) $valueCode = " values";
					//每1000行提交一次database
				 	if($rowIndex%$batchSize==0 && trim($valueCode) !="values")
					{
						$sqlString = $sqlInsertCode . $valueCode;
//						if($rowIndex>200)			echo 'Line225: ' . $sqlString;
						$dbmodel->execute($sqlString);
//						echo $sqlString;
						$valueCode = " values";
					}
					
				//生成值语句：(x,y,z),跳过空白行，跳过名称重复行
				 $firstColValue = $objWorksheet->getCellByColumnAndRow(0,$rowIndex)->getValue();
				  if($firstColValue>"" and $firstColValue!=$firstTitle)
				  {
				  	$totalRecordNum += 1;

				  	for($k=0 ; $k<count($colArray); $k++)
					  {
					  	  $cellValue = $objWorksheet->getCellByColumnAndRow($colArray[$k],$rowIndex)->getValue();
					  	  $cellValue = str_replace("'","",$cellValue);//去掉单引号，否则mysql无法执行
						  if($k==0)	
							{
								if($valueCode==" values") $valueCode = $valueCode ."('". $userCode ."','" . $cellValue ."'";
								else $valueCode = $valueCode .",\n('". $userCode  ."','" . $cellValue ."'";
							}
							else if($k == count($colArray)-1)	$valueCode = $valueCode . ",'" . $cellValue . "') ";
							else	$valueCode = $valueCode . ",'" . $cellValue . "'";
					   }
				  }
				  
				  //如果最后一行不是1000行的整数倍，则最后提交一次
				  	if($rowIndex%$batchSize && $rowIndex==$rowCount && trim($valueCode) !="values")
					{
						$sqlString = $sqlInsertCode . $valueCode;
//						if($rowIndex>200)			echo 'Line253: ' . $sqlString;
						$dbmodel->execute($sqlString);
					}
		
				}
		}
				
		unset($objPHPExcel);
		unset($objReader);
		unset($dbmodel);
		
		$callEndTime = microtime(true);
		$calcObj['sqlDuration'] = $callEndTime-$callStartTime;
		$calcObj['recordNum'] = $totalRecordNum;
		return  $calcObj;
  }
  
  
   function getUserRoles($UserCode){
		
		$rs = M("broleuser","",getMyCon())
		->page("1,100")
		->where(array("UserCode"=>$UserCode))
		->select();
		
		$rolestr = null;
		for($i=0;$i<count($rs);$i++)
		{
			if($i==0) 
				$rolestr = "'" . $rs[$i]['rolecode'] . "'";
			else
				$rolestr .= ",'" . $rs[$i]['rolecode'] . "'";
		}
		return $rolestr;
  }
  

?>